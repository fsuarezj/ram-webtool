/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lrc.liferay.toolbuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lrc.liferay.toolbuilder.model.WrapperStepDBE;
import org.lrc.liferay.toolbuilder.model.WrapperStepDBEModel;
import org.lrc.liferay.toolbuilder.model.WrapperStepDBESoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WrapperStepDBE service. Represents a row in the &quot;lrc_tb_WrapperStepDBE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lrc.liferay.toolbuilder.model.WrapperStepDBEModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WrapperStepDBEImpl}.
 * </p>
 *
 * @author Fernando Su√°rez
 * @see WrapperStepDBEImpl
 * @see org.lrc.liferay.toolbuilder.model.WrapperStepDBE
 * @see org.lrc.liferay.toolbuilder.model.WrapperStepDBEModel
 * @generated
 */
@JSON(strict = true)
public class WrapperStepDBEModelImpl extends BaseModelImpl<WrapperStepDBE>
	implements WrapperStepDBEModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wrapper step d b e model instance should use the {@link org.lrc.liferay.toolbuilder.model.WrapperStepDBE} interface instead.
	 */
	public static final String TABLE_NAME = "lrc_tb_WrapperStepDBE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "wrapperStepDBEId", Types.BIGINT },
			{ "currentStep", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table lrc_tb_WrapperStepDBE (wrapperStepDBEId LONG not null primary key,currentStep INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table lrc_tb_WrapperStepDBE";
	public static final String ORDER_BY_JPQL = " ORDER BY wrapperStepDBE.wrapperStepDBEId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lrc_tb_WrapperStepDBE.wrapperStepDBEId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lrc.liferay.toolbuilder.model.WrapperStepDBE"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lrc.liferay.toolbuilder.model.WrapperStepDBE"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lrc.liferay.toolbuilder.model.WrapperStepDBE"),
			true);
	public static long WRAPPERSTEPDBEID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WrapperStepDBE toModel(WrapperStepDBESoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WrapperStepDBE model = new WrapperStepDBEImpl();

		model.setWrapperStepDBEId(soapModel.getWrapperStepDBEId());
		model.setCurrentStep(soapModel.getCurrentStep());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WrapperStepDBE> toModels(WrapperStepDBESoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WrapperStepDBE> models = new ArrayList<WrapperStepDBE>(soapModels.length);

		for (WrapperStepDBESoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_LRC_TB_WS_STEP_NAME = "lrc_tb_WS_Step";
	public static final Object[][] MAPPING_TABLE_LRC_TB_WS_STEP_COLUMNS = {
			{ "wrapperStepDBEId", Types.BIGINT },
			{ "stepDBEId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_LRC_TB_WS_STEP_SQL_CREATE = "create table lrc_tb_WS_Step (stepDBEId LONG not null,wrapperStepDBEId LONG not null,primary key (stepDBEId, wrapperStepDBEId))";
	public static final boolean FINDER_CACHE_ENABLED_LRC_TB_WS_STEP = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.lrc_tb_WS_Step"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lrc.liferay.toolbuilder.model.WrapperStepDBE"));

	public WrapperStepDBEModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _wrapperStepDBEId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWrapperStepDBEId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _wrapperStepDBEId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WrapperStepDBE.class;
	}

	@Override
	public String getModelClassName() {
		return WrapperStepDBE.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("wrapperStepDBEId", getWrapperStepDBEId());
		attributes.put("currentStep", getCurrentStep());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long wrapperStepDBEId = (Long)attributes.get("wrapperStepDBEId");

		if (wrapperStepDBEId != null) {
			setWrapperStepDBEId(wrapperStepDBEId);
		}

		Integer currentStep = (Integer)attributes.get("currentStep");

		if (currentStep != null) {
			setCurrentStep(currentStep);
		}
	}

	@JSON
	@Override
	public long getWrapperStepDBEId() {
		return _wrapperStepDBEId;
	}

	@Override
	public void setWrapperStepDBEId(long wrapperStepDBEId) {
		_columnBitmask |= WRAPPERSTEPDBEID_COLUMN_BITMASK;

		if (!_setOriginalWrapperStepDBEId) {
			_setOriginalWrapperStepDBEId = true;

			_originalWrapperStepDBEId = _wrapperStepDBEId;
		}

		_wrapperStepDBEId = wrapperStepDBEId;
	}

	public long getOriginalWrapperStepDBEId() {
		return _originalWrapperStepDBEId;
	}

	@JSON
	@Override
	public int getCurrentStep() {
		return _currentStep;
	}

	@Override
	public void setCurrentStep(int currentStep) {
		_currentStep = currentStep;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WrapperStepDBE.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WrapperStepDBE toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WrapperStepDBE)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WrapperStepDBEImpl wrapperStepDBEImpl = new WrapperStepDBEImpl();

		wrapperStepDBEImpl.setWrapperStepDBEId(getWrapperStepDBEId());
		wrapperStepDBEImpl.setCurrentStep(getCurrentStep());

		wrapperStepDBEImpl.resetOriginalValues();

		return wrapperStepDBEImpl;
	}

	@Override
	public int compareTo(WrapperStepDBE wrapperStepDBE) {
		long primaryKey = wrapperStepDBE.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WrapperStepDBE)) {
			return false;
		}

		WrapperStepDBE wrapperStepDBE = (WrapperStepDBE)obj;

		long primaryKey = wrapperStepDBE.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WrapperStepDBEModelImpl wrapperStepDBEModelImpl = this;

		wrapperStepDBEModelImpl._originalWrapperStepDBEId = wrapperStepDBEModelImpl._wrapperStepDBEId;

		wrapperStepDBEModelImpl._setOriginalWrapperStepDBEId = false;

		wrapperStepDBEModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WrapperStepDBE> toCacheModel() {
		WrapperStepDBECacheModel wrapperStepDBECacheModel = new WrapperStepDBECacheModel();

		wrapperStepDBECacheModel.wrapperStepDBEId = getWrapperStepDBEId();

		wrapperStepDBECacheModel.currentStep = getCurrentStep();

		return wrapperStepDBECacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{wrapperStepDBEId=");
		sb.append(getWrapperStepDBEId());
		sb.append(", currentStep=");
		sb.append(getCurrentStep());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("org.lrc.liferay.toolbuilder.model.WrapperStepDBE");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>wrapperStepDBEId</column-name><column-value><![CDATA[");
		sb.append(getWrapperStepDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentStep</column-name><column-value><![CDATA[");
		sb.append(getCurrentStep());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WrapperStepDBE.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WrapperStepDBE.class
		};
	private long _wrapperStepDBEId;
	private long _originalWrapperStepDBEId;
	private boolean _setOriginalWrapperStepDBEId;
	private int _currentStep;
	private long _columnBitmask;
	private WrapperStepDBE _escapedModel;
}