/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.lrc.liferay.toolbuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE;
import org.lrc.liferay.toolbuilder.model.WrapperStepDefDBEModel;
import org.lrc.liferay.toolbuilder.model.WrapperStepDefDBESoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WrapperStepDefDBE service. Represents a row in the &quot;lrc_tb_WrapperStepDefDBE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.lrc.liferay.toolbuilder.model.WrapperStepDefDBEModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WrapperStepDefDBEImpl}.
 * </p>
 *
 * @author Fernando Su√°rez
 * @see WrapperStepDefDBEImpl
 * @see org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE
 * @see org.lrc.liferay.toolbuilder.model.WrapperStepDefDBEModel
 * @generated
 */
@JSON(strict = true)
public class WrapperStepDefDBEModelImpl extends BaseModelImpl<WrapperStepDefDBE>
	implements WrapperStepDefDBEModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wrapper step def d b e model instance should use the {@link org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE} interface instead.
	 */
	public static final String TABLE_NAME = "lrc_tb_WrapperStepDefDBE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "wrapperStepDefDBEId", Types.BIGINT },
			{ "stepsNumber", Types.INTEGER },
			{ "sequential", Types.BOOLEAN },
			{ "depth", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table lrc_tb_WrapperStepDefDBE (wrapperStepDefDBEId LONG not null primary key,stepsNumber INTEGER,sequential BOOLEAN,depth INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table lrc_tb_WrapperStepDefDBE";
	public static final String ORDER_BY_JPQL = " ORDER BY wrapperStepDefDBE.wrapperStepDefDBEId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lrc_tb_WrapperStepDefDBE.wrapperStepDefDBEId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE"),
			true);
	public static long WRAPPERSTEPDEFDBEID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WrapperStepDefDBE toModel(WrapperStepDefDBESoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WrapperStepDefDBE model = new WrapperStepDefDBEImpl();

		model.setWrapperStepDefDBEId(soapModel.getWrapperStepDefDBEId());
		model.setStepsNumber(soapModel.getStepsNumber());
		model.setSequential(soapModel.getSequential());
		model.setDepth(soapModel.getDepth());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WrapperStepDefDBE> toModels(
		WrapperStepDefDBESoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WrapperStepDefDBE> models = new ArrayList<WrapperStepDefDBE>(soapModels.length);

		for (WrapperStepDefDBESoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_LRC_TB_WSDEF_STEPDEF_NAME = "lrc_tb_WSDef_StepDef";
	public static final Object[][] MAPPING_TABLE_LRC_TB_WSDEF_STEPDEF_COLUMNS = {
			{ "wrapperStepDefDBEId", Types.BIGINT },
			{ "stepDefDBEId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_LRC_TB_WSDEF_STEPDEF_SQL_CREATE = "create table lrc_tb_WSDef_StepDef (stepDefDBEId LONG not null,wrapperStepDefDBEId LONG not null,primary key (stepDefDBEId, wrapperStepDefDBEId))";
	public static final boolean FINDER_CACHE_ENABLED_LRC_TB_WSDEF_STEPDEF = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.lrc_tb_WSDef_StepDef"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE"));

	public WrapperStepDefDBEModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _wrapperStepDefDBEId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWrapperStepDefDBEId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _wrapperStepDefDBEId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WrapperStepDefDBE.class;
	}

	@Override
	public String getModelClassName() {
		return WrapperStepDefDBE.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("wrapperStepDefDBEId", getWrapperStepDefDBEId());
		attributes.put("stepsNumber", getStepsNumber());
		attributes.put("sequential", getSequential());
		attributes.put("depth", getDepth());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long wrapperStepDefDBEId = (Long)attributes.get("wrapperStepDefDBEId");

		if (wrapperStepDefDBEId != null) {
			setWrapperStepDefDBEId(wrapperStepDefDBEId);
		}

		Integer stepsNumber = (Integer)attributes.get("stepsNumber");

		if (stepsNumber != null) {
			setStepsNumber(stepsNumber);
		}

		Boolean sequential = (Boolean)attributes.get("sequential");

		if (sequential != null) {
			setSequential(sequential);
		}

		Integer depth = (Integer)attributes.get("depth");

		if (depth != null) {
			setDepth(depth);
		}
	}

	@JSON
	@Override
	public long getWrapperStepDefDBEId() {
		return _wrapperStepDefDBEId;
	}

	@Override
	public void setWrapperStepDefDBEId(long wrapperStepDefDBEId) {
		_columnBitmask |= WRAPPERSTEPDEFDBEID_COLUMN_BITMASK;

		if (!_setOriginalWrapperStepDefDBEId) {
			_setOriginalWrapperStepDefDBEId = true;

			_originalWrapperStepDefDBEId = _wrapperStepDefDBEId;
		}

		_wrapperStepDefDBEId = wrapperStepDefDBEId;
	}

	public long getOriginalWrapperStepDefDBEId() {
		return _originalWrapperStepDefDBEId;
	}

	@JSON
	@Override
	public int getStepsNumber() {
		return _stepsNumber;
	}

	@Override
	public void setStepsNumber(int stepsNumber) {
		_stepsNumber = stepsNumber;
	}

	@JSON
	@Override
	public boolean getSequential() {
		return _sequential;
	}

	@Override
	public boolean isSequential() {
		return _sequential;
	}

	@Override
	public void setSequential(boolean sequential) {
		_sequential = sequential;
	}

	@JSON
	@Override
	public int getDepth() {
		return _depth;
	}

	@Override
	public void setDepth(int depth) {
		_depth = depth;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WrapperStepDefDBE.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WrapperStepDefDBE toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WrapperStepDefDBE)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WrapperStepDefDBEImpl wrapperStepDefDBEImpl = new WrapperStepDefDBEImpl();

		wrapperStepDefDBEImpl.setWrapperStepDefDBEId(getWrapperStepDefDBEId());
		wrapperStepDefDBEImpl.setStepsNumber(getStepsNumber());
		wrapperStepDefDBEImpl.setSequential(getSequential());
		wrapperStepDefDBEImpl.setDepth(getDepth());

		wrapperStepDefDBEImpl.resetOriginalValues();

		return wrapperStepDefDBEImpl;
	}

	@Override
	public int compareTo(WrapperStepDefDBE wrapperStepDefDBE) {
		long primaryKey = wrapperStepDefDBE.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WrapperStepDefDBE)) {
			return false;
		}

		WrapperStepDefDBE wrapperStepDefDBE = (WrapperStepDefDBE)obj;

		long primaryKey = wrapperStepDefDBE.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WrapperStepDefDBEModelImpl wrapperStepDefDBEModelImpl = this;

		wrapperStepDefDBEModelImpl._originalWrapperStepDefDBEId = wrapperStepDefDBEModelImpl._wrapperStepDefDBEId;

		wrapperStepDefDBEModelImpl._setOriginalWrapperStepDefDBEId = false;

		wrapperStepDefDBEModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WrapperStepDefDBE> toCacheModel() {
		WrapperStepDefDBECacheModel wrapperStepDefDBECacheModel = new WrapperStepDefDBECacheModel();

		wrapperStepDefDBECacheModel.wrapperStepDefDBEId = getWrapperStepDefDBEId();

		wrapperStepDefDBECacheModel.stepsNumber = getStepsNumber();

		wrapperStepDefDBECacheModel.sequential = getSequential();

		wrapperStepDefDBECacheModel.depth = getDepth();

		return wrapperStepDefDBECacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{wrapperStepDefDBEId=");
		sb.append(getWrapperStepDefDBEId());
		sb.append(", stepsNumber=");
		sb.append(getStepsNumber());
		sb.append(", sequential=");
		sb.append(getSequential());
		sb.append(", depth=");
		sb.append(getDepth());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("org.lrc.liferay.toolbuilder.model.WrapperStepDefDBE");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>wrapperStepDefDBEId</column-name><column-value><![CDATA[");
		sb.append(getWrapperStepDefDBEId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stepsNumber</column-name><column-value><![CDATA[");
		sb.append(getStepsNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequential</column-name><column-value><![CDATA[");
		sb.append(getSequential());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>depth</column-name><column-value><![CDATA[");
		sb.append(getDepth());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WrapperStepDefDBE.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WrapperStepDefDBE.class
		};
	private long _wrapperStepDefDBEId;
	private long _originalWrapperStepDefDBEId;
	private boolean _setOriginalWrapperStepDefDBEId;
	private int _stepsNumber;
	private boolean _sequential;
	private int _depth;
	private long _columnBitmask;
	private WrapperStepDefDBE _escapedModel;
}